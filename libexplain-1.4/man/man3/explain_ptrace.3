.\"
.\" libexplain - Explain errno values returned by libc functions
.\" Copyright (C) 2010, 2011 Peter Miller
.\"
.\" This program is free software; you can redistribute it and/or modify it
.\" under the terms of the GNU General Public License as published by the
.\" Free Software Foundation; either version 3 of the License, or (at your
.\" option) any later version.
.\"
.\" This program is distributed in the hope that it will be useful, but
.\" WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser
.\" General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License along
.\" with this program. If not, see <http://www.gnu.org/licenses/>.
.\"
.ds n) explain_ptrace
.cp 0  \" Solaris defaults to ''.cp 1'', sheesh.
.TH explain_ptrace 3
.SH NAME
explain_ptrace \- explain \f[I]ptrace\fP(2) errors
.if require_index \{
.XX "explain_ptrace(3)" "explain \f[I]ptrace\fP(2) errors"
.\}
.SH SYNOPSIS
#include <libexplain/ptrace.h>
.sp 0.3
.ad l
const char *explain_ptrace(int request, pid_t pid, void *addr, void *data);
.br
const char *explain_errno_ptrace(int errnum, int request, pid_t pid, void
*addr, void *data);
.br
void explain_message_ptrace(char *message, int message_size, int request,
pid_t pid, void *addr, void *data);
.br
void explain_message_errno_ptrace(char *message, int message_size, int
errnum, int request, pid_t pid, void *addr, void *data);
.ad b
.SH DESCRIPTION
These functions may be used to obtain explanations for errors returned by
the \f[I]ptrace\fP(2) system call.
.\" ----------------------------------------------------
.SS explain_ptrace
.ad l
const char *explain_ptrace(int request, pid_t pid, void *addr, void *data);
.ad b
.PP
The \f[B]explain_ptrace\fP function is used to obtain an explanation of an
error returned by the \f[I]ptrace\fP(2) system call. The least the message
will contain is the value of \f[CW]strerror(errno)\fP, but usually it will
do much better, and indicate the underlying cause in more detail.
.PP
The \f[I]errno\fP global variable will be used to obtain the error value to
be decoded.
.TP 8n
\f[I]request\fP
The original request, exactly as passed to the \f[I]ptrace\fP(2) system
call.
.TP 8n
\f[I]pid\fP
The original pid, exactly as passed to the \f[I]ptrace\fP(2) system call.
.TP 8n
\f[I]addr\fP
The original addr, exactly as passed to the \f[I]ptrace\fP(2) system call.
.TP 8n
\f[I]data\fP
The original data, exactly as passed to the \f[I]ptrace\fP(2) system call.
.TP 8n
Returns:
The message explaining the error. This message buffer is shared by all
libexplain functions which do not supply a buffer in their argument list.
This will be overwritten by the next call to any libexplain function which
shares this buffer, including other threads.
.PP
\f[B]Note:\fP This function is \f[B]not\fP thread safe, because it shares a
return buffer across all threads, and many other functions in this library.
.PP
\f[B]Example:\fP This function is intended to be used in a fashion similar
to the following example:
.RS
.ft CW
.fi
.ad l
long result = ptrace(request, pid, addr, data);
.br
if (result < 0)
.ad b
.nf
{
.fi
.ad l
.in +4n
fprintf(stderr, "%s\en", explain_ptrace(request, pid, addr, data));
.in -4n
.nf
    exit(EXIT_FAILURE);
}
.fi
.ft R
.ad b
.RE
.PP
The above code example is available pre\-packaged as the
\f[I]explain_ptrace_or_die\fP(3) function.
.\" ----------------------------------------------------
.SS explain_errno_ptrace
.ad l
const char *explain_errno_ptrace(int errnum, int request, pid_t pid, void
*addr, void *data);
.ad b
.PP
The \f[B]explain_errno_ptrace\fP function is used to obtain an explanation
of an error returned by the \f[I]ptrace\fP(2) system call. The least the
message will contain is the value of \f[CW]strerror(errno)\fP, but usually
it will do much better, and indicate the underlying cause in more detail.
.TP 8n
\f[I]errnum\fP
The error value to be decoded, usually obtained from the \f[I]errno\fP
global variable just before this function is called. This is necessary if
you need to call \f[B]any\fP code between the system call to be explained
and this function, because many libc functions will alter the value of
\f[I]errno\fP.
.TP 8n
\f[I]request\fP
The original request, exactly as passed to the \f[I]ptrace\fP(2) system
call.
.TP 8n
\f[I]pid\fP
The original pid, exactly as passed to the \f[I]ptrace\fP(2) system call.
.TP 8n
\f[I]addr\fP
The original addr, exactly as passed to the \f[I]ptrace\fP(2) system call.
.TP 8n
\f[I]data\fP
The original data, exactly as passed to the \f[I]ptrace\fP(2) system call.
.TP 8n
Returns:
The message explaining the error. This message buffer is shared by all
libexplain functions which do not supply a buffer in their argument list.
This will be overwritten by the next call to any libexplain function which
shares this buffer, including other threads.
.PP
\f[B]Note:\fP This function is \f[B]not\fP thread safe, because it shares a
return buffer across all threads, and many other functions in this library.
.PP
\f[B]Example:\fP This function is intended to be used in a fashion similar
to the following example:
.RS
.ft CW
.fi
.ad l
long result = ptrace(request, pid, addr, data);
.br
if (result < 0)
.ad b
.nf
{
    int err = errno;
.fi
.ad l
.in +4n
fprintf(stderr, "%s\en", explain_errno_ptrace(err, request, pid, addr,
data));
.in -4n
.nf
    exit(EXIT_FAILURE);
}
.fi
.ft R
.ad b
.RE
.PP
The above code example is available pre\-packaged as the
\f[I]explain_ptrace_or_die\fP(3) function.
.\" ----------------------------------------------------
.SS explain_message_ptrace
.ad l
void explain_message_ptrace(char *message, int message_size, int request,
pid_t pid, void *addr, void *data);
.ad b
.PP
The \f[B]explain_message_ptrace\fP function is used to obtain an
explanation of an error returned by the \f[I]ptrace\fP(2) system call. The
least the message will contain is the value of \f[CW]strerror(errno)\fP,
but usually it will do much better, and indicate the underlying cause in
more detail.
.PP
The \f[I]errno\fP global variable will be used to obtain the error value to
be decoded.
.TP 8n
\f[I]message\fP
The location in which to store the returned message. If a suitable message
return buffer is supplied, this function is thread safe.
.TP 8n
\f[I]message_size\fP
The size in bytes of the location in which to store the returned message.
.TP 8n
\f[I]request\fP
The original request, exactly as passed to the \f[I]ptrace\fP(2) system
call.
.TP 8n
\f[I]pid\fP
The original pid, exactly as passed to the \f[I]ptrace\fP(2) system call.
.TP 8n
\f[I]addr\fP
The original addr, exactly as passed to the \f[I]ptrace\fP(2) system call.
.TP 8n
\f[I]data\fP
The original data, exactly as passed to the \f[I]ptrace\fP(2) system call.
.PP
\f[B]Example:\fP This function is intended to be used in a fashion similar
to the following example:
.RS
.ft CW
.fi
.ad l
long result = ptrace(request, pid, addr, data);
.br
if (result < 0)
.ad b
.nf
{
    char message[3000];
.in +4n
.fi
.ad l
explain_message_ptrace(message, sizeof(message), request, pid, addr, data);
.nf
.in -4n
    fprintf(stderr, "%s\en", message);
    exit(EXIT_FAILURE);
}
.fi
.ft R
.ad b
.RE
.PP
The above code example is available pre\-packaged as the
\f[I]explain_ptrace_or_die\fP(3) function.
.\" ----------------------------------------------------
.SS explain_message_errno_ptrace
.ad l
void explain_message_errno_ptrace(char *message, int message_size, int
errnum, int request, pid_t pid, void *addr, void *data);
.ad b
.PP
The \f[B]explain_message_errno_ptrace\fP function is used to obtain an
explanation of an error returned by the \f[I]ptrace\fP(2) system call. The
least the message will contain is the value of \f[CW]strerror(errno)\fP,
but usually it will do much better, and indicate the underlying cause in
more detail.
.TP 8n
\f[I]message\fP
The location in which to store the returned message. If a suitable message
return buffer is supplied, this function is thread safe.
.TP 8n
\f[I]message_size\fP
The size in bytes of the location in which to store the returned message.
.TP 8n
\f[I]errnum\fP
The error value to be decoded, usually obtained from the \f[I]errno\fP
global variable just before this function is called. This is necessary if
you need to call \f[B]any\fP code between the system call to be explained
and this function, because many libc functions will alter the value of
\f[I]errno\fP.
.TP 8n
\f[I]request\fP
The original request, exactly as passed to the \f[I]ptrace\fP(2) system
call.
.TP 8n
\f[I]pid\fP
The original pid, exactly as passed to the \f[I]ptrace\fP(2) system call.
.TP 8n
\f[I]addr\fP
The original addr, exactly as passed to the \f[I]ptrace\fP(2) system call.
.TP 8n
\f[I]data\fP
The original data, exactly as passed to the \f[I]ptrace\fP(2) system call.
.PP
\f[B]Example:\fP This function is intended to be used in a fashion similar
to the following example:
.RS
.ft CW
.fi
.ad l
long result = ptrace(request, pid, addr, data);
.br
if (result < 0)
.ad b
.nf
{
    int err = errno;
    char message[3000];
.in +4n
.fi
.ad l
explain_message_errno_ptrace(message, sizeof(message), err, request, pid,
addr, data);
.nf
.in -4n
    fprintf(stderr, "%s\en", message);
    exit(EXIT_FAILURE);
}
.fi
.ft R
.ad b
.RE
.PP
The above code example is available pre\-packaged as the
\f[I]explain_ptrace_or_die\fP(3) function.
.\" ----------------------------------------------------
.SH SEE ALSO
.TP 8n
\f[I]ptrace\fP(2)
process trace
.TP 8n
\f[I]explain_ptrace_or_die\fP(3)
process trace and report errors
.\" ----------------------------------------------------
.SH COPYRIGHT
.so etc/version.so
.if n .ds C) (C)
.if t .ds C) \(co
libexplain version \*(v)
.br
Copyright \*(C) 2010 Peter Miller
.\" vim: set ts=8 sw=4 et
