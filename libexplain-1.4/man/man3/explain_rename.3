.\"
.\" libexplain - Explain errno values returned by libc functions
.\" Copyright (C) 2008, 2009 Peter Miller
.\" Written by Peter Miller <pmiller@opensource.org.au>
.\"
.\" This program is free software; you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation; either version 3 of the License, or
.\" (at your option) any later version.
.\"
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
.\" General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" along with this program. If not, see <http://www.gnu.org/licenses/>.
.\"
.TH explain_rename 3
.SH NAME
explain_rename \- explain rename(2) errors
.if require_index \{
.XX "explain_rename(3)" "explain rename(2) errors"
.\}
.SH SYNOPSIS
#include <libexplain/rename.h>
.br
const char *explain_rename(const char *oldpath, const char *newpath);
.br
const char *explain_errno_rename(int errnum, const char *oldpath,
const char *newpath);
.br
void explain_message_rename(char *message, int message_size,
const char *oldpath, const char *newpath);
.br
void explain_message_errno_rename(char *message, int message_size,
int errnum, const char *oldpath, const char *newpath);
.SH DESCRIPTION
The functions declared in the \f[CR]<libexplain/rename.h>\fP include file
may be used to explain errors returned by the \f[I]rename\fP(2) system call.
.\" ------------------------------------------------------------------------
.SS explain_rename
const char *explain_rename(const char *oldpath, const char *newpath);
.PP
The explain_rename function is used to obtain an explanation of an
error returned by the \f[I]rename\fP(2) function.  The least the message
will contain is the value of strerror(errno), but usually it will do
much better, and indicate the underlying cause in more detail.
.PP
The \f[I]errno\fP global variable will be used to obtain the error value
to be decoded.
.PP
This function is intended to be used in a fashion similar to the
following example:
.RS
.ft CR
.nf
if (rename(oldpath, rewpath) < 0)
{
    fprintf(stderr, "%s\en", explain_rename(oldpath, newpath));
    exit(EXIT_FAILURE);
}
.ft R
.fi
.RE
.TP 8n
\f[I]oldpath\fP
The original oldpath, exactly as passed to the \f[I]rename\fP(2) system call.
.TP 8n
\f[I]newpath\fP
The original newpath, exactly as passed to the \f[I]rename\fP(2) system call.
.TP 8n
Returns:
The message explaining the error.  This message buffer is shared by all
libexplain functions which do not supply a buffer in their argument
list.  This will be overwritten by the next call to any libexplain
function which shares this buffer, including other threads.
.PP
\f[B]Note:\fP
This function is \f[B]not\fP thread safe, because it shares a return
buffer across all threads, and many other functions in this library.
.\" ------------------------------------------------------------------------
.SS explain_errno_rename
const char *explain_errno_rename(int errnum, const char *oldpath,
const char *newpath);
.PP
The explain_errno_rename function is used to obtain an explanation of
an error returned by the rename(2) function.  The least the message will
contain is the value of strerror(errnum), but usually it will do much
better, and indicate the underlying cause in more detail.
.PP
This function is intended to be used in a fashion similar to the
following example:
.RS
.ft CR
.nf
if (rename(oldpath, newpath) < 0)
{
    int err = errno;
    fprintf(stderr, "%s\en", explain_errno_rename(err, oldpath,
        newpath));
    exit(EXIT_FAILURE);
}
.fi
.ft R
.RE
.TP 8n
\f[I]errnum\fP
The error value to be decoded, usually obtained from the \f[I]errno\fP
global variable just before this function is called.  This is necessary
if you need to call \f[B]any\fP code between the system call to be
explained and this function, because many libc functions will alter the
value of \f[I]errno\fP.
.TP 8n
\f[I]oldpath\fP
The original oldpath, exactly as passed to the \f[I]rename\fP(2) system call.
.TP 8n
\f[I]newpath\fP
The original newpath, exactly as passed to the \f[I]rename\fP(2) system call.
.TP 8n
Returns:
The message explaining the error.  This message buffer is shared by all
libexplain functions which do not supply a buffer in their argument
list.  This will be overwritten by the next call to any libexplain
function which shares this buffer, including other threads.
.PP
\f[B]Note:\fP
This function is \fBnot\fP thread safe, because it shares a return
buffer across all threads, and many other functions in this library.
.\" ------------------------------------------------------------------------
.SS explain_message_rename
void explain_message_rename(char *message, int message_size,
const char *oldpath, const char *newpath);
.PP
The explain_message_rename function is used to obtain an explanation
of an error returned by the \f[I]rename\fP(2) function.  The least the
message will contain is the value of strerror(errno), but usually it
will do much better, and indicate the underlying cause in more detail.
.PP
The \f[I]errno\fP global variable will be used to obtain the error value
to be decoded.
.PP
This function is intended to be used in a fashion similar to the
following example:
.RS
.ft CR
.nf
if (rename(oldpath, newpath) < 0)
{
    char message[3000];
    explain_message_rename(message, sizeof(message), oldpath,
        newpath);
    fprintf(stderr, "%s\en", message);
    exit(EXIT_FAILURE);
}
.fi
.ft R
.RE
.TP 8n
\f[I]message\fP
The location in which to store the returned message.  Because a message
return buffer has been supplied, this function is thread safe, if the
buffer is thread safe.
.TP 8n
\f[I]message_size\fP
The size in bytes of the location in which to store the returned message.
.TP 8n
\f[I]oldpath\fP
The original oldpath, exactly as passed to the \f[I]rename\fP(2) system call.
.TP 8n
\fInewpath\fP
The original newpath, exactly as passed to the \f[I]rename\fP(2) system call.
.\" ------------------------------------------------------------------------
.SS explain_message_errno_rename
void explain_message_errno_rename(char *message, int message_size,
int errnum, const char *oldpath, const char *newpath);
.PP
The explain_message_errno_rename function is used to obtain an
explanation of an error returned by the \f[I]rename\fP(2) function.  The
least the message will contain is the value of strerror(errnum), but
usually it will do much better, and indicate the underlying cause in
more detail.
.PP
This function is intended to be used in a fashion similar to the
following example:
.RS
.ft CR
.nf
if (rename(oldpath, newpath) < 0)
{
    int err = errno;
    char message[3000];
    explain_message_errno_rename(message, sizeof(message), err,
        oldpath, newpath);
    fprintf(stderr, "%s\en", message);
    exit(EXIT_FAILURE);
}
.ft R
.fi
.RE
.PP
.TP 8n
\f[I]message\fP
The location in which to store the returned message.  Because a message
return buffer has been supplied, this function is thread safe, given a
thread safe buffer.
.TP 8n
\f[I]message_size\fP
The size in bytes of the location in which to store the returned message.
.TP 8n
\fIerrnum\fP
The error value to be decoded, usually obtained from the \f[I]errno\fP
global variable just before this function is called.  This is necessary
if you need to call \f[B]any\fP code between the system call to be
explained and this function, because many libc functions will alter the
value of \f[I]errno\fP.
.TP 8n
\f[I]oldpath\fP
The original oldpath, exactly as passed to the \f[I]rename\fP(2) system call.
.TP 8n
\f[I]newpath\fP
The original newpath, exactly as passed to the \f[I]rename\fP(2) system call.
.\" ------------------------------------------------------------------------
.SH COPYRIGHT
.so etc/version.so
.if n .ds C) (C)
.if t .ds C) \(co
libexplain version \*(v)
.br
Copyright \*(C) 2008 Peter Miller
.SH AUTHOR
Written by Peter Miller <pmiller@opensource.org.au>
