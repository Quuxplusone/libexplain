.\"
.\" libexplain - Explain errno values returned by libc functions
.\" Copyright (C) 2008, 2009, 2011 Peter Miller
.\"
.\" This program is free software; you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation; either version 3 of the License, or (at
.\" your option) any later version.
.\"
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
.\" General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" along with this program. If not, see <http://www.gnu.org/licenses/>.
.\"
.ds n) explain_utime
.cp 0  \" Solaris defaults to ''.cp 1'', sheesh.
.TH explain_utime 3
.SH NAME
explain_utime \- explain utime(2) errors
.if require_index \{
.XX "explain_utime(3)" "explain utime(2) errors"
.\}
.SH SYNOPSIS
#include <libexplain/utime.h>
.sp 0.3
const char *explain_utime(const char *pathname, const struct utimbuf *times);
.br
const char *explain_errno_utime(int errnum, const char *pathname,
const struct utimbuf *times);
.br
void explain_message_utime(char *message, int message_size,
const char *pathname, const struct utimbuf *times);
.br
void explain_message_errno_utime(char *message, int message_size, int errnum,
const char *pathname, const struct utimbuf *times);
.SH DESCRIPTION
These functions may be used to obtain explanations for
errors returned by the \f[I]utime\fP(2) system call.
.\" ----------------------------------------------------
.SS explain_utime
const char *explain_utime(const char *pathname, const struct utimbuf *times);
.PP
The \f[B]explain_utime\fP function is
used to obtain an explanation of an error returned by the \f[I]utime\fP(2)
system call.  The least the message will contain is the
value of \f[CW]strerror(errno)\fP, but usually it will
do much better, and indicate the underlying cause in more
detail.
.PP
The \f[I]errno\fP global variable will be used to obtain
the error value to be decoded.
.PP
This function is intended to be used in a fashion
similar to the following example:
.RS
.ft CW
.nf
if (utime(pathname, times) < 0)
{
    fprintf(stderr, "%s\en", explain_utime(pathname, times));
    exit(EXIT_FAILURE);
}
.fi
.ft R
.RE
.TP 8n
\f[I]pathname\fP
The original pathname, exactly as passed to the \f[I]utime\fP(2) system call.
.TP 8n
\f[I]times\fP
The original times, exactly as passed to the \f[I]utime\fP(2) system call.
.TP 8n
Returns:
The message explaining the error.  This message buffer is
shared by all libexplain functions which do not supply a
buffer in their argument list.  This will be overwritten
by the next call to any libexplain function which shares
this buffer, including other threads.
.PP
\f[B]Note:\fP
This function is \f[B]not\fP thread safe, because it
shares a return buffer across all threads, and many other
functions in this library.
.\" ----------------------------------------------------
.SS explain_errno_utime
const char *explain_errno_utime(int errnum, const char *pathname,
const struct utimbuf *times);
.PP
The \f[B]explain_errno_utime\fP function
is used to obtain an explanation of an error returned by
the \f[I]utime\fP(2) system call.
The least the message will contain is the value of
\f[CW]strerror(errnum)\fP, but usually it will do much
better, and indicate the underlying cause in more detail.
.PP
This function is intended to be used in a fashion
similar to the following example:
.RS
.ft CW
.nf
if (utime(pathname, times) < 0)
{
    int err = errno;
    fprintf(stderr, "%s\en", explain_errno_utime(err, pathname, times));
    exit(EXIT_FAILURE);
}
.fi
.ft R
.RE
.TP 8n
\f[I]errnum\fP
The error value to be decoded, usually obtained from
the \f[I]errno\fP global variable just before this
function is called.  This is necessary if you need to call
\f[B]any\fP code between the system call to be explained
and this function, because many libc functions will alter
the value of \f[I]errno\fP.
.TP 8n
\f[I]pathname\fP
The original pathname, exactly as passed to the \f[I]utime\fP(2) system call.
.TP 8n
\f[I]times\fP
The original times, exactly as passed to the \f[I]utime\fP(2) system call.
.TP 8n
Returns:
The message explaining the error.  This message buffer is
shared by all libexplain functions which do not supply a
buffer in their argument list.  This will be overwritten
by the next call to any libexplain function which shares
this buffer, including other threads.
.PP
\f[B]Note:\fP
This function is \f[B]not\fP thread safe, because it
shares a return buffer across all threads, and many other
functions in this library.
.\" ----------------------------------------------------
.SS explain_message_utime
void explain_message_utime(char *message, int message_size,
const char *pathname, const struct utimbuf *times);
.PP
The \f[B]explain_message_utime\fP
function may be used to  obtain an explanation of an error
returned by the
\f[I]utime\fP(2) system call.
The least the message will contain is the value of
\f[CW]strerror(errno)\fP, but usually it will do much
better, and indicate the underlying cause in more detail.
.PP
The \f[I]errno\fP global variable will be used to obtain
the error value to be decoded.
.PP
This function is intended to be used in a fashion
similar to the following example:
.RS
.ft CW
.nf
if (utime(pathname, times) < 0)
{
    char message[3000];
    explain_message_utime(message, sizeof(message), pathname, times);
    fprintf(stderr, "%s\en", message);
    exit(EXIT_FAILURE);
}
.fi
.ft R
.RE
.TP 8n
\f[I]message\fP
The location in which to store the returned message.
If a suitable message return buffer is supplied, this
function is thread safe.
.TP 8n
\f[I]message_size\fP
The size in bytes of the location in which to
store the returned message.
.TP 8n
\f[I]pathname\fP
The original pathname, exactly as passed to the \f[I]utime\fP(2) system call.
.TP 8n
\f[I]times\fP
The original times, exactly as passed to the \f[I]utime\fP(2) system call.
.\" ----------------------------------------------------
.SS explain_message_errno_utime
void explain_message_errno_utime(char *message, int message_size, int errnum,
const char *pathname, const struct utimbuf *times);
.PP
The \f[B]explain_message_errno_utime\fP
function may be used to obtain an explanation of an error
returned by the
\f[I]utime\fP(2) system call.
The least the message will contain is the value of
\f[CW]strerror(errnum)\fP, but usually it will do much
better, and indicate the underlying cause in more detail.
.PP
This function is intended to be used in a fashion
similar to the following example:
.RS
.ft CW
.nf
if (utime(pathname, times) < 0)
{
    int err = errno;
    char message[3000];
    explain_message_errno_utime(message, sizeof(message), err,
        pathname, times);
    fprintf(stderr, "%s\en", message);
    exit(EXIT_FAILURE);
}
.fi
.ft R
.RE
.TP 8n
\f[I]message\fP
The location in which to store the returned message.
If a suitable message return buffer is supplied, this
function is thread safe.
.TP 8n
\f[I]message_size\fP
The size in bytes of the location in which to
store the returned message.
.TP 8n
\f[I]errnum\fP
The error value to be decoded, usually obtained from
the \f[I]errno\fP global variable just before this
function is called.  This is necessary if you need to call
\f[B]any\fP code between the system call to be explained
and this function, because many libc functions will alter
the value of \f[I]errno\fP.
.TP 8n
\f[I]pathname\fP
The original pathname, exactly as passed to the \f[I]utime\fP(2) system call.
.TP 8n
\f[I]times\fP
The original times, exactly as passed to the \f[I]utime\fP(2) system call.
.\" ----------------------------------------------------
.SH SEE ALSO
.TP 8n
\f[I]utime\fP(2)
change file last access and modification times
.TP 8n
\f[I]explain_utime_or_die\fP(3)
change file last access and modification times and report errors
.\" ----------------------------------------------------
.SH COPYRIGHT
.so etc/version.so
.if n .ds C) (C)
.if t .ds C) \(co
libexplain version \*(v)
.br
Copyright \*(C) 2008 Peter Miller
